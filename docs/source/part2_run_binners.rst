Part 2: Running Binners
=======================

Overview
--------

In this part, you will perform metagenomic binning using three different binners: MetaDecoder, MetaBAT2, and SemiBin2. You will explore their parameters, run the tools, and inspect the outputs.

Task 1: Binning with MetaDecoder
--------------------------------

**Step 1: Run MetaDecoder**

Create a configuration file for MetaDecoder:

.. code-block:: bash

   # Define MetaDecoder output directory
   md_output_dir="bins/metadecoder"

   # Create a directory for MetaDecoder results
   mkdir -p ${md_output_dir}

   # Create sam file for MetaDecoder
   samtools view -@ ${threads} -h ${bam} -o mapping/mapping.sam

   # Run MetaDecoder coverage calculation and delete temporary sam file
   metadecoder coverage --sam mapping/mapping.sam \
                        --threads ${threads} \
                        --output ${md_output_dir}/METADECODER.COVERAGE \
    && rm -rf mapping/mapping.sam

   # Run MetaDecoder seed calculation
   metadecoder seed --fasta ${assembly} \
                    --threads ${threads} \
                    --output ${md_output_dir}/METADECODER.SEED

   # Run MetaDecoder clustering
   metadecoder cluster --fasta ${assembly} \
                       --coverage ${md_output_dir}/METADECODER.COVERAGE \
                       --seed ${md_output_dir}/METADECODER.SEED \
                       --output ${md_output_dir}/METADECODER

   # Make a bin to contig mapping file
   bin2cont_script="${course_path}/scripts/binning_practical/bin2contig.py"

   python3 ${bin2cont_script} \
      ${md_output_dir}/METADECODER \
      ${md_output_dir}/contig_bins.tsv

**Step 2: Inspect MetaDecoder Output**

List the bins generated:

.. code-block:: bash

   ls -lh ${md_output_dir}

**Questions**

- **Q1:** How many bins were generated by MetaDecoder?
- **Q2:** What criteria does MetaDecoder use for binning?

Task 2: Binning with MetaBAT2
-----------------------------

**Step 1: Run MetaBAT2**

Execute MetaBAT2 using the assembly and coverage information:

.. code-block:: bash

   # Define MetaBAT2 output directory
   mb_output_dir="bins/metabat2"

   # Create a directory for MetaBAT2 results
   mkdir -p ${mb_output_dir}

   # Set temporary directory for MetaBAT2 
   export TMPDIR="${session_path}/metabat_tmp"
   mkdir -p ${TMPDIR}
   TMP_FILE=$(mktemp "metabat_depth_XXXXXX.tsv")
   echo "# fakeheader" > $TMP_FILE
   cat ${coverage}  >> $TMP_FILE

   ## Run MetaBAT2
   metabat2 -i ${assembly} \
            -a ${TMP_FILE} \
            --cvExt \
            --saveCls \
            -o ${mb_output_dir}/metabat \
            -t ${threads}

   # Change coti to bin mapping file name for clarity
   mv ${mb_output_dir}/metabat \
      ${mb_output_dir}/contig_bins.tsv

   # Remove temporary files
   rm -rf ${TMPDIR} ${TMP_FILE}

**Step 2: Inspect MetaBAT2 Output**

List the bins generated:

.. code-block:: bash

   ls -lh bins/metabat2

**Questions**

- **Q3:** How many bins were generated by MetaBAT2?
- **Q4:** What parameters could you adjust to potentially improve binning results?

Task 3: Binning with SemiBin2
-----------------------------

**Step 1: Run SemiBin2**

Execute SemiBin2:

.. code-block:: bash

   # Define SemiBin2 output directory
   sb_output_dir="bins/semibin2"

   # Create a directory for SemiBin2 results
   mkdir -p ${sb_output_dir}

   # Run SemiBin2
   SemiBin2 single_easy_bin \
      --input-fasta ${assembly} \
      --output ${sb_output_dir} \
      -b ${bam} \
      --environment global \
      --compression none \
      --threads ${threads}

   # Make a bin to contig mapping file
   python3 ${bin2cont_script} \
      ${sb_output_dir}/output_bins \
      ${sb_output_dir}/contig_bins.tsv

**Step 3: Inspect SemiBin2 Output**

List the bins generated:

.. code-block:: bash

   ls -lh bins/semibin2

**Questions**

- **Q5:** How many bins were generated by SemiBin2?
- **Q6:** What machine learning techniques does SemiBin2 employ?

.. hint::
   
   You could increase the training phase speed significantly by using a GPU.

Task 4: Compare Binner Outputs
------------------------------

**Step 1: Summarize Bin Counts**

- **Q7:** Do the binners produce similar numbers of bins?

**Step 2: Assessing Bin Quality**

- **Q9:** What metrics can you use to assess bin quality?
- **Q10:** How might the choice of binner affect your downstream analysis?

**Notes**

- Each binner uses different algorithms and may produce varying results.
- Comparing outputs helps in understanding the strengths and weaknesses of each tool.
